// Generated by diesel_ext
use diesel::prelude::*;

use chrono::NaiveDateTime;
#[derive(Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::db_lib::schema::accounts)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Account {
    pub id: i32,
    pub email: String,
    pub username: String,
    pub password: String,
    pub time_stamp: Option<NaiveDateTime>,
    pub account_type: Option<i32>,
}

#[derive(Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::db_lib::schema::currencies)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Currency {
    pub id: i32,
    pub code: String,
    pub name: String,
}

#[derive(Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::db_lib::schema::exchange_api_keys)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct ExchangeApiKey {
    pub id: i32,
    pub api_key: String,
    pub secret_key: String,
}

#[derive(Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::db_lib::schema::intra_account_transfer_requests)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct IntraAccountTransferRequest {
    pub id: i32,
    pub admin_account_id: i32,
    pub trader_account_id: i32,
    pub position_id: i32,
    pub from_portfolio_id: i32,
    pub to_portfolio_id: i32,
    pub price: i64,
    pub quantity: i64,
    pub fee: i64,
    pub is_approved: bool,
    pub created_at: Option<NaiveDateTime>,
}

#[derive(Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::db_lib::schema::orders)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Order {
    pub id: i32,
    pub time_stamp: NaiveDateTime,
    pub state: i32,
    pub buyin: bool,
    pub trading_pair_id: i32,
    pub quotation_id: i32,
    pub price: i64,
    pub qty: i64,
}

#[derive(Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::db_lib::schema::portfolio_balance)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct PortfolioBalance {
    pub id: i32,
    pub portfolio_id: i32,
    pub quantity: i64,
    pub currency_id: i32,
}

#[derive(Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::db_lib::schema::portfolios)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Portfolio {
    pub id: i32,
    pub time_stamp: NaiveDateTime,
    pub trader_account_id: i32,
    pub portfolio_type: i32,
}

#[derive(Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::db_lib::schema::positions)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Position {
    pub id: i32,
    pub trading_pair_id: i32,
    pub portfolio_id: i32,
}

#[derive(Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::db_lib::schema::quotations)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Quotation {
    pub id: i32,
    pub time_stamp: NaiveDateTime,
    pub base_currency_id: i32,
    pub position_id: i32,
}

#[derive(Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::db_lib::schema::risk_management)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct RiskManagement {
    pub id: i32,
    pub risk_type: String,
    pub valid: bool,
    pub pnl: i64,
    pub position: i32,
    pub portfolio_id: i32,
}

#[derive(Queryable, Selectable, Debug)]
#[diesel(table_name = crate::db_lib::schema::trading_pairs)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct TradingPair {
    pub id: i32,
    pub base_currency_id: i32,
    pub quote_currency_id: i32,
}
